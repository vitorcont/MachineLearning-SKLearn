# -*- coding: utf-8 -*-
"""Machine Learning 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEEnnC59O_NR97uVQCVmpy8-CEpavyU6
"""

import pandas as pd
uri = "https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv"
dados = pd.read_csv(uri)
dados.head()

mapa={
    "mileage_per_year":"milhas",
    "model_year":"ano_modelo",
    "price":"preco",
    "sold":"vendido"
}

dados=dados.rename(columns=mapa)
!pip install seaborn==0.9.0

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
!pip install seaborn==0.9.0

a_trocar={
    "yes":1,
    "no":0
}

dados.vendido=dados.vendido.map(a_trocar)

from datetime import datetime
ano_atual=datetime.today().year
dados["idade"] = ano_atual - dados.ano_modelo

dados

dados["kms_ano"]=dados.milhas * 1.609
dados.head()

dados=dados.drop(columns=["Unnamed: 0","milhas","ano_modelo"],axis=1)

dados

x = dados[["preco","idade","kms_ano"]]
y= dados["vendido"]

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

import numpy as np
SEED=5
np.random.seed(SEED)
treino_x, teste_x, treino_y,teste_y = train_test_split(
    x,
    y,
    test_size=0.30,
    stratify=y)


modelo=LinearSVC()
modelo.fit(treino_x,treino_y)
previsoes=modelo.predict(teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))



from sklearn.dummy import DummyClassifier
dummy_stratified = DummyClassifier()

dummy_stratified.fit(treino_x,treino_y)
previsoes=dummy_stratified.predict(teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))

from sklearn.dummy import DummyClassifier
dummy_most = DummyClassifier()

dummy_most.fit(treino_x,treino_y)
acuracia=dummy_most.score(teste_x,teste_y)
print("A acurácia foi de %.2f%%" % (100*acuracia))

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

import numpy as np
SEED=20
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y,teste_y = train_test_split(
    x,
    y,
    test_size=0.25,
    stratify=y)

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x=scaler.transform(raw_treino_x)
teste_x=scaler.transform(raw_teste_x)

modelo=SVC()
modelo.fit(treino_x,treino_y)
previsoes=modelo.predict(teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))



from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
import numpy as np
SEED=20
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y,teste_y = train_test_split(
    x,
    y,
    test_size=0.25,
    stratify=y)

modelo=DecisionTreeClassifier(max_depth=3)
modelo.fit(raw_treino_x,treino_y)
previsoes=modelo.predict(raw_teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))

from sklearn.tree import export_graphviz
import graphviz
features = x.columns
dot_data = export_graphviz(modelo, 
                           out_file=None,
                           filled=True,
                           rounded=True,
                           feature_names=features,
                           class_names=["não","sim"])
graphviz.Source(dot_data)

