# -*- coding: utf-8 -*-
"""Machine Learning 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fF6sUh7w0Xd2fQyhq_Li8lt_V3Z3Hu36
"""

!pip install seaborn==0.9.0

import pandas as pd
uri = "https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv"
dados = pd.read_csv(uri)
dados.head()

mapa={
    "unfinished":"nao_finalizado",
    "expected_hours":"horas_esperadas",
    "price":"preco"
}

dados=dados.rename(columns=mapa)
!pip install seaborn==0.9.0

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
dados.head()

trocar={
    0:1,
    1:0
}
dados["finalizado"]=dados.nao_finalizado.map(trocar)

dados.head()

dados.tail()

import seaborn as sns
sns.scatterplot(x="horas_esperadas",y="preco",data=dados)

sns.scatterplot(x="horas_esperadas",y="preco",hue="finalizado",data=dados)

sns.relplot(x="horas_esperadas",y="preco",hue="finalizado",col="finalizado",data=dados)

x=dados[["horas_esperadas","preco"]]
y=dados["finalizado"]

from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
SEED=5
np.random.seed(SEED)
treino_x, teste_x, treino_y,teste_y = train_test_split(
    x,
    y,
    test_size=0.30,
    stratify=y)


modelo=LinearSVC()
modelo.fit(treino_x,treino_y)
previsoes=modelo.predict(teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))

import numpy as np
previsoes_de_base=np.ones(540)
print("A acurácia foi de %.2f%%" % (100*taxa_acerto))

sns.scatterplot(x="horas_esperadas",y="preco",hue=teste_y,data=teste_x)

x_min=teste_x.horas_esperadas.min()
x_max=teste_x.horas_esperadas.max()

y_min=teste_x.preco.min()
y_max=teste_x.preco.max()

print(x_min,x_max,y_min,y_max)

pixels=100
eixo_x=np.arange(x_min,x_max, (x_max-x_min)/pixels)
eixo_y=np.arange(y_min,y_max, (y_max-y_min)/pixels)
xx,yy=np.meshgrid(eixo_x,eixo_y)
pontos=np.c_[xx.ravel(), yy.ravel()]
Z=modelo.predict(pontos)
Z=Z.reshape(xx.shape)
import matplotlib.pyplot as plt
plt.contour(xx,yy,Z,alpha=0.3)
plt.scatter(teste_x.horas_esperadas, teste_x.preco, c=teste_y, s=1)









Z.shape



import matplotlib.pyplot as plt
plt.contour(xx,yy,Z,alpha=0.3)
plt.scatter(teste_x.horas_esperadas, teste_x.preco, c=teste_y, s=1)

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
SEED=20
np.random.seed(SEED)
raw_treino_x, raw_teste_x, treino_y,teste_y = train_test_split(
    x,
    y,
    test_size=0.25,
    stratify=y)

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x=scaler.transform(raw_treino_x)
teste_x=scaler.transform(raw_teste_x)

modelo=SVC()
modelo.fit(treino_x,treino_y)
previsoes=modelo.predict(teste_x)

taxa_acerto=accuracy_score(teste_y,previsoes)

print("A acurácia foi de %.2f%%" % (100*taxa_acerto))

data_x=teste_x[:,0]
data_y=teste_x[:,1]

x_min=data_x.min()
x_max=data_x.max()

y_min=data_y.min()
y_max=data_y.max()

pixels=100
eixo_x=np.arange(x_min,x_max, (x_max-x_min)/pixels)
eixo_y=np.arange(y_min,y_max, (y_max-y_min)/pixels)
xx,yy=np.meshgrid(eixo_x,eixo_y)
pontos=np.c_[xx.ravel(), yy.ravel()]
Z=modelo.predict(pontos)
Z=Z.reshape(xx.shape)
import matplotlib.pyplot as plt
plt.contour(xx,yy,Z,alpha=0.3)
plt.scatter(data_x, data_y, c=teste_y, s=1)

